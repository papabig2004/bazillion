4. РЕАЛИЗАЦИЯ ПРОЕКТА

4.1 Реализация серверной части

Основной файл сервера (server.js) содержит следующую структуру:

```javascript
const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const axios = require('axios');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(express.static('public'));

// Маршруты
app.post('/api/lead', async (req, res) => {
    try {
        const { name, phone, email, message } = req.body;
        
        // Отправка данных в Bitrix24
        const bitrixResponse = await sendToBitrix24(name, phone, email, message);
        
        // Отправка данных в amoCRM
        const amoResponse = await sendToAmoCRM(name, phone, email, message);
        
        res.json({ success: true, bitrix: bitrixResponse, amo: amoResponse });
    } catch (error) {
        console.error('Error processing lead:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
```

4.2 Интеграция с Bitrix24

Реализация отправки данных в Bitrix24:

```javascript
async function sendToBitrix24(name, phone, email, message) {
    try {
        const webhookUrl = process.env.BITRIX_WEBHOOK_URL;
        
        const leadData = {
            fields: {
                TITLE: `Новая заявка от ${name}`,
                NAME: name,
                PHONE: [{ VALUE: phone, VALUE_TYPE: 'WORK' }],
                EMAIL: [{ VALUE: email, VALUE_TYPE: 'WORK' }],
                COMMENTS: message,
                SOURCE_ID: 'WEB',
                STATUS_ID: 'NEW'
            }
        };

        const response = await axios.post(webhookUrl, leadData);
        return response.data;
    } catch (error) {
        console.error('Bitrix24 API Error:', error);
        throw new Error('Failed to send data to Bitrix24');
    }
}
```

4.3 Интеграция с amoCRM

Реализация отправки данных в amoCRM:

```javascript
async function sendToAmoCRM(name, phone, email, message) {
    try {
        const baseUrl = process.env.AMO_BASE_URL;
        const accessToken = process.env.AMO_ACCESS_TOKEN;
        
        const leadData = {
            name: `Новая заявка от ${name}`,
            price: 0,
            status_id: 123456, // ID статуса "Новая заявка"
            responsible_user_id: 123456, // ID ответственного менеджера
            contacts: [{
                name: name,
                custom_fields_values: [
                    {
                        field_id: 123456, // ID поля телефона
                        values: [{ value: phone }]
                    },
                    {
                        field_id: 123456, // ID поля email
                        values: [{ value: email }]
                    }
                ]
            }],
            custom_fields_values: [
                {
                    field_id: 123456, // ID поля сообщения
                    values: [{ value: message }]
                }
            ]
        };

        const response = await axios.post(`${baseUrl}/api/v4/leads`, leadData, {
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        return response.data;
    } catch (error) {
        console.error('amoCRM API Error:', error);
        throw new Error('Failed to send data to amoCRM');
    }
}
```

4.4 Конфигурация проекта

Файл .env содержит следующие переменные окружения:

```plaintext
PORT=3000
BITRIX_WEBHOOK_URL=https://your-domain.bitrix24.ru/rest/1/your-webhook-token/crm.lead.add
AMO_BASE_URL=https://your-domain.amocrm.ru
AMO_ACCESS_TOKEN=your-access-token
```

4.5 Обработка ошибок и валидация

Реализация валидации входящих данных:

```javascript
function validateLeadData(data) {
    const { name, phone, email, message } = data;
    const errors = [];

    if (!name || name.length < 2) {
        errors.push('Имя должно содержать минимум 2 символа');
    }

    if (!phone || !/^\+?[0-9]{10,15}$/.test(phone)) {
        errors.push('Неверный формат телефона');
    }

    if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
        errors.push('Неверный формат email');
    }

    if (!message || message.length < 10) {
        errors.push('Сообщение должно содержать минимум 10 символов');
    }

    return {
        isValid: errors.length === 0,
        errors
    };
}
```

4.6 Логирование и мониторинг

Реализация системы логирования:

```javascript
const winston = require('winston');

const logger = winston.createLogger({
    level: 'info',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [
        new winston.transports.File({ filename: 'error.log', level: 'error' }),
        new winston.transports.File({ filename: 'combined.log' })
    ]
});

if (process.env.NODE_ENV !== 'production') {
    logger.add(new winston.transports.Console({
        format: winston.format.simple()
    }));
}
```

4.7 Безопасность

Реализация базовых мер безопасности:

```javascript
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');

// Защита от распространенных веб-уязвимостей
app.use(helmet());

// Ограничение количества запросов
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 минут
    max: 100 // максимум 100 запросов с одного IP
});

app.use('/api/', limiter);
```

4.8 Оптимизация производительности

Реализация кэширования:

```javascript
const mcache = require('memory-cache');

const cache = (duration) => {
    return (req, res, next) => {
        const key = '__express__' + req.originalUrl || req.url;
        const cachedBody = mcache.get(key);

        if (cachedBody) {
            res.send(cachedBody);
            return;
        }

        res.sendResponse = res.send;
        res.send = (body) => {
            mcache.put(key, body, duration * 1000);
            res.sendResponse(body);
        };
        next();
    };
};

// Пример использования кэширования
app.get('/api/some-endpoint', cache(300), (req, res) => {
    // Кэширование на 5 минут
});
```

4.9 Реализация анимации конфетти

Для создания эффекта конфетти при успешной отправке формы используется библиотека canvas-confetti. Реализация включает в себя как базовую анимацию, так и кастомные эффекты:

```javascript
// Импорт библиотеки
import confetti from 'canvas-confetti';

// Базовая функция для запуска конфетти
function launchConfetti() {
    const duration = 3 * 1000;
    const animationEnd = Date.now() + duration;
    const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

    function randomInRange(min, max) {
        return Math.random() * (max - min) + min;
    }

    const interval = setInterval(function() {
        const timeLeft = animationEnd - Date.now();

        if (timeLeft <= 0) {
            return clearInterval(interval);
        }

        const particleCount = 50 * (timeLeft / duration);
        
        // Конфетти слева
        confetti({
            ...defaults,
            particleCount,
            origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }
        });
        
        // Конфетти справа
        confetti({
            ...defaults,
            particleCount,
            origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }
        });
    }, 250);
}

// Кастомный эффект для особых случаев
function launchSpecialConfetti() {
    const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff'];
    
    confetti({
        particleCount: 100,
        angle: 60,
        spread: 55,
        origin: { x: 0 },
        colors: colors
    });
    
    confetti({
        particleCount: 100,
        angle: 120,
        spread: 55,
        origin: { x: 1 },
        colors: colors
    });
}

// Использование в обработчике успешной отправки формы
form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    try {
        const response = await sendFormData(formData);
        if (response.success) {
            launchConfetti();
            // Для особых случаев можно использовать специальный эффект
            // launchSpecialConfetti();
        }
    } catch (error) {
        console.error('Error submitting form:', error);
    }
});
```

Для работы конфетти необходимо добавить canvas-элемент в HTML:

```html
<canvas id="confetti-canvas"></canvas>
```

И соответствующие стили в CSS:

```css
#confetti-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 9999;
}
```

Эта реализация конфетти обеспечивает:
- Плавную анимацию с постепенным затуханием
- Случайное распределение частиц
- Возможность кастомизации цветов и параметров
- Оптимизированную производительность благодаря использованию canvas
- Отсутствие влияния на взаимодействие с другими элементами страницы

Эффект конфетти создает позитивное впечатление у пользователя при успешном завершении важных действий на сайте, таких как отправка формы или завершение заказа.

Эти фрагменты кода демонстрируют основные аспекты реализации проекта, включая:
- Настройку сервера
- Интеграцию с CRM-системами
- Обработку ошибок
- Валидацию данных
- Логирование
- Безопасность
- Оптимизацию производительности

Каждый компонент был тщательно протестирован и оптимизирован для обеспечения надежной работы системы. 